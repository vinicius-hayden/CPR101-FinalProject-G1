BN@BN MINGW64 ~/Onedrive/desktop/v3
$ git config --global user.name "Ashwin B N"

BN@BN MINGW64 ~/Onedrive/desktop/v3
$ git config --global user.email "abharathan-nettoor@myseneca.ca"

BN@BN MINGW64 ~/Onedrive/desktop/v3
$ git config --list #
diff.astextplain.textconv=astextplain
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
http.sslbackend=openssl
http.sslcainfo=C:/Program Files/Git/mingw64/etc/ssl/certs/ca-bundle.crt
core.autocrlf=true
core.fscache=true
core.symlinks=false
pull.rebase=false
credential.helper=manager
credential.https://dev.azure.com.usehttppath=true
init.defaultbranch=master
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
user.name=Ashwin B N
user.email=abharathan-nettoor@myseneca.ca

BN@BN MINGW64 ~/Onedrive/desktop/v3
$ git init #
Initialized empty Git repository in C:/Users/ashwi/OneDrive/Desktop/v3/.git/

BN@BN MINGW64 ~/Onedrive/desktop/v3 (master)
$ ls
tokenizing-git-log.txt  tokenizing-test-cases.xlsx  tokenizing-testing.txt  tokenizing.c  tokenizing.h

BN@BN MINGW64 ~/Onedrive/desktop/v3 (master)
$ git add tokenizing.c

BN@BN MINGW64 ~/Onedrive/desktop/v3 (master)
$ git add tokenizing.h

BN@BN MINGW64 ~/Onedrive/desktop/v3 (master)
$ git commit -m version 3
error: pathspec '3' did not match any file(s) known to git

BN@BN MINGW64 ~/Onedrive/desktop/v3 (master)
$ git commit -m version_3
[master (root-commit) 27d7a92] version_3
 2 files changed, 83 insertions(+)
 create mode 100644 tokenizing.c
 create mode 100644 tokenizing.h

BN@BN MINGW64 ~/Onedrive/desktop/v3 (master)
$ git status -v #
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        tokenizing-git-log.txt
        tokenizing-test-cases.xlsx
        tokenizing-testing.txt

nothing added to commit but untracked files present (use "git add" to track)

BN@BN MINGW64 ~/Onedrive/desktop/v3 (master)
$ git log #
commit 27d7a9244c77b6eac9d839e461d3ed56bbfd8a04 (HEAD -> master)
Author: Ashwin B N <abharathan-nettoor@myseneca.ca>
Date:   Mon Aug 14 00:52:25 2023 -0400

    version_3

BN@BN MINGW64 ~/Onedrive/desktop/v3 (master)
$ git log -p #
commit 27d7a9244c77b6eac9d839e461d3ed56bbfd8a04 (HEAD -> master)
Author: Ashwin B N <abharathan-nettoor@myseneca.ca>
Date:   Mon Aug 14 00:52:25 2023 -0400

    version_3

diff --git a/tokenizing.c b/tokenizing.c
new file mode 100644
index 0000000..2cbbac9
--- /dev/null
+++ b/tokenizing.c
@@ -0,0 +1,75 @@
+// TOKENIZING MODULE SOURCE
+#define _CTR_SECURE_NO_WARNINGS
+#define BUFFER_SIZE 300 //set the macro for BUFFER_SIZE as 300
+#include "tokenizing.h" //this is to include tokenizing header file
+
+/* V1
+void tokenizing(void) { //this is where the function defintion begins
+       printf("*** Start of Tokenizing Words Demo ***\n"); //this prints the message which is in the d
ouble quotes
+       char words[BUFFER_SIZE]; // an array of type character 'words' has been declared of size 300
+       char* nextWord = NULL; // a pointer of type char 'word' has been declared
+       int     wordsCounter; // an variable of type integer 'wordsCounter' has been declared
+       do {
+               printf("Type a few words seperated by space (q - to quit):\n"); // this prints the mess
age to prompt the user to enter words seperated by spaces or q to quit
+               fgets(words, BUFFER_SIZE, stdin); // user input data
+               words[strlen(words) - 1] = '\0';
+               if (strcmp(words, "q") != 0) { // Check if input is not 'q'
+                       nextWord = strtok(words, " "); // Tokenize input string
+                       wordsCounter = 1; // Initialize word counter
+
+                       while (nextWord) { // Iterate through tokenized words
+                               printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord); // Print word
 and its count
+                               nextWord = strtok(NULL, " "); // Move to the next token
+                       }
+               }
+       } while (strcmp(words, "q") != 0); // Continue loop until input is 'q'
+
+       printf("*** End of Tokenizing Words Demo ***\n\n"); // Print end message
+}
+
+// V2
+void tokenizing(void) { // This is where function definition begins
+       printf("*** Start of Tokenizing Words Demo ***\n"); //this prints the message which is in the d
ouble quotes
+       char phrases[BUFFER_SIZE]; // an array of type character 'phrases' has been declared of size 30
0
+       char* nextPhrase = NULL; // a pointer of type char 'phrases' has been declared
+       int     phrasesCounter; // an variable of type integer 'phrasesCounter' has been declared to co
unt number of phrases
+       do {
+               printf("Type a few phrases seperated by comma (q - to quit):\n"); // this prints the me
ssage to prompt the user to enter words seperated by spaces or q to quit
+               fgets(phrases, BUFFER_SIZE, stdin); // Get user input data
+               phrases[strlen(phrases) - 1] = '\0'; // Remove the newline character with null terminat
or at the end of string
+               if (strcmp(phrases, "q") != 0) { // Check if input is not 'q'
+                       char* context;
+                       nextPhrase = strtok_s(phrases, ",",&context); // Tokenize input string using co
mma as delimiter
+                       phrasesCounter = 1; // Initialize phrase counter
+                       while (nextPhrase) { // Iterate through tokenized phrases
+                               printf("Phrase #%d is \'%s\'\n", phrasesCounter++, nextPhrase); // Prin
t phrase and its count
+                               nextPhrase = strtok_s(NULL, ",", &context); // Move to the next token
+                       }
+               }
+       } while (strcmp(phrases, "q") != 0); // Continue loop until input is 'q'
+       printf("*** End of Tokenizing Words Demo ***\n\n"); // Print end message
+}*/
+
+
+
+//V3
+void tokenizing(void) { // This is where function definition begins
+       printf("*** Start of Tokenizing Words Demo ***\n"); //this prints the message which is in the d
ouble quotes
+       char sentences[BUFFER_SIZE]; // an array of type character 'sentences' has been declared of siz
e 300
+       char* nextSentence = NULL;  // a pointer of type char 'sentences' has been declared
+       int     sentencesCounter; // an variable of type integer 'sentencesCounter' has been declared t
o count number of sentences
+       do {
+               printf("Type a few sentences seperated by dot (q - to quit):\n"); // this prints the me
ssage to prompt the user to enter sentences seperated by dot or q to quit
+               fgets(sentences, BUFFER_SIZE, stdin); // Get user input data
+               sentences[strlen(sentences) - 1] = '\0'; // Remove the newline character with null term
inator at the end of string
+               if (strcmp(sentences, "q") != 0) { // Check if input is not 'q'
+                       nextSentence = strtok(sentences, "."); // Tokenize input string using dot as de
limiter
+                       sentencesCounter = 1; // Initialize sentence counter
+                       while (nextSentence) { // Iterate through tokenized sentences
+                               printf("Word #%d is \'%s\'\n", sentencesCounter++, nextSentence); // Pr
int sentences and its count
+                               nextSentence = strtok(NULL, "."); // Move to the next token
+                       }
+               }
+       } while (strcmp(sentences, "q") != 0); // Continue loop until input is 'q'
+       printf("*** End of Tokenizing Words Demo ***\n\n"); // Print end message
+}
diff --git a/tokenizing.h b/tokenizing.h
new file mode 100644
index 0000000..fdca2ca
--- /dev/null
+++ b/tokenizing.h
@@ -0,0 +1,8 @@
+// TOKENIZING MODULE HEADER
+#ifndef _TOKENIZING_H_
+#define _TOKENIZING_H_
+
+#include <stdio.h> //this is to include the standard input output header file
+#include <string.h> //this is to include the string library
+void tokenizing(); //this is the function prototype for the function tokenizing
+#endif // !_TOKENIZING_H_
\ No newline at end of file

BN@BN MINGW64 ~/Onedrive/desktop/v3 (master)
$ git --no-pager log -p > "complete_git_log.txt" #

BN@BN MINGW64 ~/Onedrive/desktop/v3 (master)
$ git --no-pager log -p module* > "module_git_log.txt" #
